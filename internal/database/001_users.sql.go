// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: 001_users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (id, firstName, lastName, email, password)
VALUES (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID        string
	Firstname sql.NullString
	Lastname  sql.NullString
	Email     string
	Password  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, firstname, lastname, email, password FROM users
WHERE email = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, firstname, lastname, email, password FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users
SET firstName = ?, lastName = ?, email = ?, password = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Firstname sql.NullString
	Lastname  sql.NullString
	Email     string
	Password  string
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.ID,
	)
}
