// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: 002_chats.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createChat = `-- name: CreateChat :execresult
INSERT INTO chats (id, createdby, lastMessage, participants, created_at, is_group_chat)
VALUES (?, ?, ?, ?, ?,?)
`

type CreateChatParams struct {
	ID           string
	Createdby    sql.NullString
	Lastmessage  sql.NullString
	Participants sql.NullString
	CreatedAt    time.Time
	IsGroupChat  sql.NullBool
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createChat,
		arg.ID,
		arg.Createdby,
		arg.Lastmessage,
		arg.Participants,
		arg.CreatedAt,
		arg.IsGroupChat,
	)
}

const deleteChat = `-- name: DeleteChat :exec
DELETE FROM chats
WHERE id = ?
`

func (q *Queries) DeleteChat(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteChat, id)
	return err
}

const getChat = `-- name: GetChat :one
SELECT id, createdby, lastmessage, participants, created_at, is_group_chat FROM chats
WHERE participants = ?
LIMIT 1
`

func (q *Queries) GetChat(ctx context.Context, participants sql.NullString) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChat, participants)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Createdby,
		&i.Lastmessage,
		&i.Participants,
		&i.CreatedAt,
		&i.IsGroupChat,
	)
	return i, err
}

const getChats = `-- name: GetChats :many
SELECT id, createdby, lastmessage, participants, created_at, is_group_chat FROM chats
`

func (q *Queries) GetChats(ctx context.Context) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.Createdby,
			&i.Lastmessage,
			&i.Participants,
			&i.CreatedAt,
			&i.IsGroupChat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatsByuserId = `-- name: GetChatsByuserId :many
SELECT id, createdby, lastmessage, participants, created_at, is_group_chat FROM chats
WHERE createdby = ?
`

func (q *Queries) GetChatsByuserId(ctx context.Context, createdby sql.NullString) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChatsByuserId, createdby)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.Createdby,
			&i.Lastmessage,
			&i.Participants,
			&i.CreatedAt,
			&i.IsGroupChat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChat = `-- name: UpdateChat :execresult
UPDATE chats
SET lastMessage = ?, participants = ?, is_group_chat = ?
WHERE id = ?
`

type UpdateChatParams struct {
	Lastmessage  sql.NullString
	Participants sql.NullString
	IsGroupChat  sql.NullBool
	ID           string
}

func (q *Queries) UpdateChat(ctx context.Context, arg UpdateChatParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateChat,
		arg.Lastmessage,
		arg.Participants,
		arg.IsGroupChat,
		arg.ID,
	)
}

const updateLatestMessage = `-- name: UpdateLatestMessage :execresult
UPDATE chats
SET lastMessage = ?
WHERE id = ?
`

type UpdateLatestMessageParams struct {
	Lastmessage sql.NullString
	ID          string
}

func (q *Queries) UpdateLatestMessage(ctx context.Context, arg UpdateLatestMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateLatestMessage, arg.Lastmessage, arg.ID)
}
