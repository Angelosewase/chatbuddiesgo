// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: 003_messages.sql

package database

import (
	"context"
	"database/sql"
)

const addTextMessage = `-- name: AddTextMessage :execresult
INSERT INTO messages(id,chat_id,sender_id,content) VALUES (?,?,?,?)
`

type AddTextMessageParams struct {
	ID       string
	ChatID   string
	SenderID string
	Content  string
}

func (q *Queries) AddTextMessage(ctx context.Context, arg AddTextMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addTextMessage,
		arg.ID,
		arg.ChatID,
		arg.SenderID,
		arg.Content,
	)
}

const deleteMessage = `-- name: DeleteMessage :execresult
UPDATE messages SET is_deleted = TRUE, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteMessage, id)
}

const getMessageById = `-- name: GetMessageById :one
SELECT id, chat_id, sender_id, content, content_type, created_at, updated_at, is_deleted FROM messages WHERE id = ?
`

func (q *Queries) GetMessageById(ctx context.Context, id string) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageById, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.SenderID,
		&i.Content,
		&i.ContentType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getMessagesByChatId = `-- name: GetMessagesByChatId :many
SELECT id, chat_id, sender_id, content, content_type, created_at, updated_at, is_deleted FROM messages WHERE chat_id = ?
`

func (q *Queries) GetMessagesByChatId(ctx context.Context, chatID string) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByChatId, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.SenderID,
			&i.Content,
			&i.ContentType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
