// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: 005_chatSelection.sql

package database

import (
	"context"
	"database/sql"
)

const getChatNotCreatedByTheUser = `-- name: GetChatNotCreatedByTheUser :many

SELECT id, createdby, lastmessage, participants, created_at, is_group_chat
FROM chats 
WHERE createdby != ? 
AND (participants LIKE CONCAT('%,', ?, ',%') OR participants LIKE CONCAT(?, ',%') OR participants LIKE CONCAT('%,', ?) OR participants = ?)
`

type GetChatNotCreatedByTheUserParams struct {
	Createdby    sql.NullString
	CONCAT       interface{}
	CONCAT_2     interface{}
	CONCAT_3     interface{}
	Participants sql.NullString
}

func (q *Queries) GetChatNotCreatedByTheUser(ctx context.Context, arg GetChatNotCreatedByTheUserParams) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChatNotCreatedByTheUser,
		arg.Createdby,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.CONCAT_3,
		arg.Participants,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.Createdby,
			&i.Lastmessage,
			&i.Participants,
			&i.CreatedAt,
			&i.IsGroupChat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
